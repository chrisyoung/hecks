class <%= hexagon_name.camelize %>
  module UseCases
    # The objective of use case patterns is to
    # bridge the gap between business and
    # system models without altering requirements
    # contents nor preempting architectural options.

    class <%= name.camelize %>
      attr_accessor :errors, :id

      def initialize(repositories=Utilities::Repositories.new)
        @repositories = repositories
        @errors = []
      end

      def call(name:)
        @name = name
        tap do
          validate
          # perform operation if errors.empty?
        end
      end

      private

      attr_accessor :repositories

      def validate
        # errors << "ERROR MESSAGE" unless SOMETHING
      end
    end
  end
end
