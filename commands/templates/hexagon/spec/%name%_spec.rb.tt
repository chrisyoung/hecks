describe <%= name.camelize %> do
  let(:adapter)    { double('Adapter', :[] => repository) }
  let(:repository) { double('Repository') }
  let(:use_case)   { double('UseCase') }
  let(:use_cases)  { double('UseCases', :[] => use_case) }

  subject { described_class.new(database_adapter: adapter, use_cases: use_cases) }

  describe '#delete_all' do
    it 'delegates to the database_adapter' do
      expect(adapter).to receive(:delete_all)
      subject.delete_all
    end
  end

  describe '#query' do
    it 'delegates to the repository' do
      expect(repository).to receive(:query)
      subject.query(:pizzas)
    end
  end

  describe '#run' do
    it 'calls the appropriate use case' do
      expect(use_case).to receive(:new)
        .with(args: {}, database_adapter: adapter) {
          double('usecase instance', call: nil)
        }
      subject.run(:pizzas, :create_pizza)
    end
  end
end
