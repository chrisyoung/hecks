module <%= @aggregate.domain.name %>
  module <%= @aggregate.name %>
    class <%= @name %>
      attr_reader <%= @fields.map { |field| ':' + field.name.to_s }.join(', ') %>

      def initialize <%= @fields.map { |field| field.name.to_s + ':'}.join(', ') %>
        <% @fields.each do |field| %>
        <% if field.is_a?(List) %>
        @<%= field.name %> = <%= field.name %>.map do |object|
          <%= field.get_as %>.new(object)
        end
        <% elsif field.is_a?(Entity) %>
        <% if field.get_as.is_a?(Hash) %>
        @<%= field.name %> = <%= field.get_as.keys.first %>::<%= field.get_as.values.first %>.new(<%= field.name %>)
        <% else %>
        @<%= field.name %> = <%= field.get_as %>.new(<%= field.name %>)
        <% end %>
        <% else %>
        @<%= field.name %> = <%= field.name %>
        <% end %>
        <% end %>
      end
    end
  end
end